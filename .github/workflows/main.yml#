## This is a basic workflow to help you get started with Actions

#name: CI

## Controls when the action will run. Triggers the workflow on push or pull request
## events but only for the master branch
#on:
#  push:
#    branches: [ master ]
#  pull_request:
 #   branches: [ master ]

## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
 ##   - uses: actions/checkout@v2
##
 #   # Runs a single command using the runners shell
#    - name: Run a one-line script
 #     run: echo Hello, world!
#
#    # Runs a set of commands using the runners shell
#    - name: Run a multi-line script
#      run: |
#        echo Add other actions to build,
#        echo test, and deploy your project.
#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *
  #push:
     branches: 
       - master
  #     ↑↑↑ 改成你的分支名, 一般是master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master
        #      ↑↑↑ 改成你的分支名, 一般是master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          echo "Deleting files, please wait ..."
          sudo rm -rf \
            /usr/share/dotnet \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge \
            azure-cli \
            ghc* \
            zulu* \
            hhvm \
            llvm* \
            firefox \
            google* \
            dotnet* \
            powershell \
            openjdk* \
            mysql* \
            php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Costom configure file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          # 
          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 
          # 以下为定制化固件选项和说明:
          #
          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #
          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF
          # 固件压缩:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF
          # 编译UEFI固件:
          cat >> .config <<EOF
          CONFIG_GRUB_CONSOLE=y
          CONFIG_GRUB_SERIAL="ttyS0"
          CONFIG_GRUB_BAUDRATE=115200
          CONFIG_GRUB_BOOTOPTS=""
          CONFIG_GRUB_TIMEOUT="0"
          CONFIG_GRUB_TITLE="OpenWrt"
          CONFIG_VMDK_IMAGES=y
          CONFIG_TARGET_IMAGES_PAD=y
          EOF
          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF
          # 多文件系统支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          EOF
          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-3c59x=m
          CONFIG_PACKAGE_kmod-8139cp=y
          CONFIG_PACKAGE_kmod-8139too=y
          CONFIG_PACKAGE_kmod-alx=m
          CONFIG_PACKAGE_kmod-atl1=m
          CONFIG_PACKAGE_kmod-atl1c=m
          CONFIG_PACKAGE_kmod-atl1e=m
          CONFIG_PACKAGE_kmod-atl2=m
          CONFIG_PACKAGE_kmod-b44=m
          CONFIG_PACKAGE_kmod-be2net=m
          CONFIG_PACKAGE_kmod-bnx2=y
          CONFIG_PACKAGE_kmod-bnx2x=y
          CONFIG_PACKAGE_kmod-dm9000=m
          CONFIG_PACKAGE_kmod-dummy=m
          CONFIG_PACKAGE_kmod-e100=m
          CONFIG_PACKAGE_kmod-e1000=y
          CONFIG_PACKAGE_kmod-e1000e=y
          CONFIG_PACKAGE_kmod-et131x=m
          CONFIG_PACKAGE_kmod-ethoc=m
          CONFIG_PACKAGE_kmod-forcedeth=m
          CONFIG_PACKAGE_kmod-gigaset=m
          CONFIG_PACKAGE_kmod-hfcmulti=m
          CONFIG_PACKAGE_kmod-hfcpci=m
          CONFIG_PACKAGE_kmod-i40e=y
          CONFIG_PACKAGE_kmod-i40evf=y
          CONFIG_PACKAGE_kmod-ifb=m
          CONFIG_PACKAGE_kmod-igb=y
          CONFIG_PACKAGE_kmod-igbvf=y
          CONFIG_PACKAGE_kmod-ixgbe=y
          CONFIG_PACKAGE_kmod-ixgbevf=m
          CONFIG_PACKAGE_kmod-libphy=y
          CONFIG_PACKAGE_kmod-macvlan=y
          CONFIG_PACKAGE_kmod-mdio-gpio=m
          CONFIG_PACKAGE_kmod-mii=y
          CONFIG_PACKAGE_kmod-mlx4-core=m
          CONFIG_PACKAGE_kmod-mlx5-core=m
          CONFIG_PACKAGE_kmod-natsemi=m
          CONFIG_PACKAGE_kmod-ne2k-pci=m
          CONFIG_PACKAGE_kmod-niu=m
          CONFIG_PACKAGE_kmod-of-mdio=m
          CONFIG_PACKAGE_kmod-pcnet32=y
          CONFIG_PACKAGE_kmod-phy-broadcom=y
          CONFIG_PACKAGE_kmod-phy-realtek=y
          CONFIG_PACKAGE_kmod-phylib-broadcom=y
          CONFIG_PACKAGE_kmod-r6040=m
          CONFIG_PACKAGE_kmod-r8125=y
          CONFIG_PACKAGE_kmod-r8169=y
          CONFIG_PACKAGE_kmod-sfc=m
          CONFIG_PACKAGE_kmod-siit=m
          CONFIG_PACKAGE_kmod-sis190=m
          CONFIG_PACKAGE_kmod-sis900=m
          CONFIG_PACKAGE_kmod-skge=m
          CONFIG_PACKAGE_kmod-sky2=m
          CONFIG_PACKAGE_kmod-solos-pci=m
          CONFIG_PACKAGE_kmod-spi-ks8995=m
          CONFIG_PACKAGE_kmod-swconfig=m
          CONFIG_PACKAGE_kmod-switch-ip17xx=m
          CONFIG_PACKAGE_kmod-switch-mvsw61xx=m
          CONFIG_PACKAGE_kmod-switch-rtl8306=m
          CONFIG_PACKAGE_kmod-switch-rtl8366-smi=m
          CONFIG_PACKAGE_kmod-switch-rtl8366rb=m
          CONFIG_PACKAGE_kmod-switch-rtl8366s=m
          CONFIG_PACKAGE_kmod-switch-rtl8367b=m
          CONFIG_PACKAGE_kmod-tg3=y
          CONFIG_PACKAGE_kmod-tulip=y
          CONFIG_PACKAGE_kmod-via-rhine=m
          CONFIG_PACKAGE_kmod-via-velocity=m
          CONFIG_PACKAGE_kmod-vmxnet3=y

          EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-aria2=y
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-hd-idle=y
          CONFIG_PACKAGE_luci-app-kodexplorer=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-v2ray-server=y
          CONFIG_PACKAGE_luci-app-verysync=y
          CONFIG_PACKAGE_luci-app-webadmin=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          EOF
          # LuCI主题:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-netgear=y
          EOF
          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Download package source code
        run: |
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      - name: Compile firmware
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s
      - name : Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt firmware
          path: bin/targets
